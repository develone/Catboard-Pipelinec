
██████╗ ██╗██████╗ ███████╗██╗     ██╗███╗   ██╗███████╗ ██████╗
██╔══██╗██║██╔══██╗██╔════╝██║     ██║████╗  ██║██╔════╝██╔════╝
██████╔╝██║██████╔╝█████╗  ██║     ██║██╔██╗ ██║█████╗  ██║     
██╔═══╝ ██║██╔═══╝ ██╔══╝  ██║     ██║██║╚██╗██║██╔══╝  ██║     
██║     ██║██║     ███████╗███████╗██║██║ ╚████║███████╗╚██████╗
╚═╝     ╚═╝╚═╝     ╚══════╝╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝ ╚═════╝

Output directory: /home/devel/Catboard-Pipelinec/pmod-ethernet/ice_makefile_pipelinec/pipelinec_output
================== Parsing C Code to Logical Hierarchy ================================
Parsing: /home/devel/Catboard-Pipelinec/pmod-ethernet/ice_makefile_pipelinec/ethernet_top.c
Generating code to get through first round of preprocessing...
Trying to generate:  ['work_outputs_t_bytes_t.h', 'work_inputs_t_bytes_t.h']
Generating code based on PipelineC supported C text patterns...
Preprocessing file...
Parsing C syntax...
Parsing non-function definitions...
Ignoring pointer declaration: inputs /home/devel/PipelineC/examples/net/work.h:40:28
Ignoring pointer declaration: outputs /home/devel/PipelineC/examples/net/work.h:40:52
Marking global variable ice_25 as constant since never written...
Marking global variable FPGA_MAC_BYTES as constant since never written...
Marking global variable max_val as constant since never written...
Marking global variable work_pipeline_no_handshake_in_id as constant since never written...
Matching clock domain: main function rmii_tx_mac_instance based on shared global variable rmii_tx used with clock domain for main function rmii_connect @ 50.0 MHz, Group: None
Matching clock domain: main function rmii_rx_mac_instance based on shared global variable rmii_rx used with clock domain for main function rmii_connect @ 50.0 MHz, Group: None
Matching clock domain: main function work_pipeline_no_handshake based on shared global variable work_pipeline_no_handshake_in used with clock domain for main function work_pipeline_handshake @ 25.0 MHz, Group: None
Parsing derived fsm logic functions...
Generating code based on PipelineC supported C design patterns...
Re/generating:  {'uint8_t_array_N_t.h', 'int8_t_bytes_t.h'}
Generating code to get through first round of preprocessing...
Trying to generate:  ['uint8_t_array_N_t.h', 'work_inputs_t_bytes_t.h', 'int8_t_bytes_t.h', 'work_outputs_t_bytes_t.h']
Generating code based on PipelineC supported C text patterns...
Preprocessing file...
Parsing C syntax...
Parsing non-function definitions...
Ignoring pointer declaration: inputs /home/devel/PipelineC/examples/net/work.h:40:28
Ignoring pointer declaration: outputs /home/devel/PipelineC/examples/net/work.h:40:52
Marking global variable ice_25 as constant since never written...
Marking global variable FPGA_MAC_BYTES as constant since never written...
Marking global variable max_val as constant since never written...
Marking global variable work_pipeline_no_handshake_in_id as constant since never written...
Parsing derived fsm logic functions...
Generating code based on PipelineC supported C design patterns...
Generating code to get through first round of preprocessing...
Trying to generate:  ['uint8_t_array_N_t.h', 'int8_t_bytes_t.h']
Generating code based on PipelineC supported C text patterns...
Preprocessing file...
Parsing C syntax...
Parsing non-function definitions...
Ignoring pointer declaration: inputs /home/devel/PipelineC/examples/net/work.h:40:28
Ignoring pointer declaration: outputs /home/devel/PipelineC/examples/net/work.h:40:52
Marking global variable ice_25 as constant since never written...
Marking global variable FPGA_MAC_BYTES as constant since never written...
Marking global variable max_val as constant since never written...
Marking global variable work_pipeline_no_handshake_in_id as constant since never written...
Parsing derived fsm logic functions...
Generating code based on PipelineC supported C design patterns...
Doing old-style code generation based on PipelineC supported text patterns...
Elaborating function dataflow...
Using OPEN_TOOLS synthesizing for part: ICE40UP5K-SG48
Elaborating dataflow of function: axis8_keep_count
Elaborating dataflow of function: axis8_max_len_limiter
Elaborating dataflow of function: rmii_rx_mac
Elaborating dataflow of function: rmii_tx_mac
Elaborating dataflow of function: skid_buf_rmii_eth_mac_rx_fifo
Elaborating dataflow of function: skid_buf_rmii_eth_mac_tx_fifo
Elaborating dataflow of function: rmii_rx_mac_instance
Elaborating dataflow of function: rmii_tx_mac_instance
Elaborating dataflow of function: eth_8_rx
Elaborating dataflow of function: eth_8_tx
Elaborating dataflow of function: work
Elaborating dataflow of function: work_pipeline_no_handshake
Elaborating dataflow of function: work_pipeline_FIFO
Elaborating dataflow of function: work_deserialize_type_byte_deserializer_deserializer_in_to_out
Elaborating dataflow of function: work_deserialize_type_byte_deserializer
Elaborating dataflow of function: work_deserialize
Elaborating dataflow of function: work_serialize_serializer_in_to_out
Elaborating dataflow of function: work_serialize
Elaborating dataflow of function: rx_main
Elaborating dataflow of function: tx_main
Elaborating dataflow of function: blinky_main
Elaborating user function hierarchies down to raw HDL logic...
... found: uint32_mux16
... found: VAR_REF_RD_uint32_t_uint32_t_16_VAR_7a60
... found: BIN_OP_LT_uint16_t_uint3_t
... found: BIN_OP_LTE_uint16_t_uint16_t
... found: BIN_OP_LT_uint6_t_uint6_t
Doing obvious logic trimming/collapsing...
Writing generated PipelineC code from elaboration to output directories...
Writing cache of parsed information to file...
================== Writing Resulting Logic to File ================================
Writing log of integer module instances: /home/devel/Catboard-Pipelinec/pmod-ethernet/ice_makefile_pipelinec/pipelinec_output/integer_module_instances.log
Writing VHDL files for all functions (before any added pipelining)...
Writing multi main top level files...
Writing the constant struct+enum definitions as defined from C code...
Writing global wire definitions as parsed from C code...
Writing output files before adding pipelining...
Output VHDL files: /home/devel/Catboard-Pipelinec/pmod-ethernet/ice_makefile_pipelinec/pipelinec_output/vhdl_files.txt
Done.
